React 2021 Up and Running Notes
---------------------------------------------------------------------------------------------------------
01 SETTING UP
---------------------------------------------------------------------------------------------------------


public\index.html -->       src\index.js        -->             src\App.js
(holds the root)      (renders <App /> in root)     (App component/Top of component tree)


CREATE NEW REACT PROJECT --> npx create-react-app app-name


BUILD PRODUCTION VERSION --> npm run BUILD
    (this will be an optimised version of the project)


START DEVELOPMENT SERVER --> npm start
    (when running dev version you can view the components in dev tools)


SERVE PRODUCTION VERSION FROM BUILD FOLDER --> npx serve -s build
    (requires the installation of the serve package)
    (can not view react component in dev tools)


---------------------------------------------------------------------------------------------------------
02 - WORKING WITH JSX
---------------------------------------------------------------------------------------------------------


In React we create modules/components that are each a function that returns a single object containing html. The basic way to do this would be to
use React.createElement() to manually create each html element. Instead, we can use JSX to write html like code that we be converted by BABEL using
React.createElement(). BABEL converts our JSX into an object that will contain html.


Since our JSX will mostly span multiple line we want to be sure to add parenthesis after our return to avoidJavaScript's automatic semi-colon injection (end so return nothing/exit early). Everthing inside the parenthesis of return() will be treated as if it is on the same line as the return statement. If we used parenthesis {} then we would be returning an object which we don't want to do, we want to feed JSX to BABEL.


Each component function can only return ONE JSX element. BABEL is expecting one to convert using React.createElement() and so there will be an error if it receives two. We can, however, have mulitple JSX elements nested inside a top level element that is being returned. The main thing is that there can only be ONE TOP LEVEL ELEMENT. This could be a <div>, a <main>, or a react fragment <></>.


JSX is JavaScript not HTML so when we add attributes to JSX elements we have to remember to do so in the JavaScript way. Instead of adding class="", we would add className="". The pattern is camelCase.


If we are using a simple string for an attribute we can pass it in with double quotes. If we want to pass in a variable we need to use parenthesis e.g. let appStyle = 'App'    className={appStyle}.


In JSX we can 'escape' to pure JavaScript using parenthesis e.g. { return 2 + 2 }. Sometimes an attribute may be expecting an object and so if we want to hard code it there with JavaScript we actually need double parenthesis {{}} e.g. style={{color: 'green'}}


---------------------------------------------------------------------------------------------------------
03 COMPONENTS AND PROPS
---------------------------------------------------------------------------------------------------------


React is fundamentally about building an interface. The way we do this is not by creating the whole thing in one big file but instead by making many small pieces of the interface which we can then insert into our top level component, <App />.


Before a class based approach was used but now the convention is to use functional components. Each component is it's own file that exports a function that returns JSX. Here's a bsic example:

    export default function App() {
        return (
            <div>
                ...
            </div>
    );
    }


The old class based approach made components like so:

    import React from 'react'

    export default class App extends React.Component{
        constructor(props){
            super(props)
        }

        render() {
            return (
                <div>
                    ...
                </div>
            )
        }
    }


Whether we want to use class or function components the important thing to know is that each component is it's own .js or .jsx file which another component (usually our top level App component) can import and use the html it returns (thanks to BABEL). So our top level component may end up looking something like this:

    import "./App.css";
    import Header from 'components/Header/Header';
    import Main from 'components/Main/Main';
    import Footer from 'components/Footer/Footer';

    function App() {
    return (
        <div className="App">
            <Header />
            <Main />
            <Footer />
        </div>
    );
    }

    export default App;


So we simply import the component and insert them like lego blocks to make use of the html their function returns. Notice the convention of putting all components in their own folder inside a parent component folder (in src) and also every component is capitalised. We can also have a css file in each component folder to style each component individually.


So the file structure would be:

    \src
        \components
            \Header
                Header.js
                header.css
            \Main
                Main.js
                main.css
            \Footer
                Footer.js
                footer.css
        App.js


PROPS

Props are properties that we can pass DOWN from one component to another but not up the tree e.g. we could pass a prop from App down to Header but we can't pass a prop from Header up to App.


The way we pass props to component is to include them like attributes in the higher level component e.g. 

    import Header from "./components/Header/Header";

    export default function App() {
    const name = "Acme";
        return (
            <div className="App">
            <Header companyName={name} />
            </div>
        );
    }



The prop could be called anything we want and we don't need to assign a variable first to pass into a prop like we have here.


So far we've passed the name variable as a prop to our Header component but we haven't made use of it in any way. To do that we go to our Header.js, include props as an argument of the function, then reference it as a piece of JavaScript in our JSX e.g.

    export default function Header(props) {
        return (
            <header className="masthead">
            <h1>{props.companyName}</h1>
            <Nav />
            </header>
        );
    }


We don't need to call the argument passed in props but it is the standard convention. If we had passed in as (bill) then we would access the prop we want as {bill.companyName}.


We can also use destructuring to make this cleaner, eliminating the need to use the props prefix e.g.

    export default function Header({ companyName }) {
        return (
            <header className="masthead">
            <h1>{companyName}</h1>
            <Nav />
            </header>
        );
    }

With destructuring the name passed into the argument must EXACTLY match the name we passed into the component in the parent.


We can pass as many props as we like down, for example lets also pass down a title to Header

    export default function App() {
        const name = "Acme";
        return (
            <div className="App">
            <Header companyName={name} title="hard coded" />
            </div>
        );
    }


Now say we don't want to use this in our Header but instead in our Nav, we simply pass it down another level where we use the Nav component in our Header component

    export default function Header(props) {
        let title = props.title;
            return (
                <header className="masthead">
                <h1>{props.companyName}</h1>
                <Nav title={title}/>
                </header>
            );
    }


Then we can make use of the prop.title, that was passed from App to Header then from Header to Nav, inside our Nav component

    import "./nav.css";

    export default function Nav(props) {
        return <nav>{props.title}</nav>;
    }

The prop didn't need to have the same name as it started with in App, we could have passed it down to Nav in the Header component with a different name (e.g. let ttl = props.title) but it helps to be consistent.

Props can be passed down the chain/tree of components from parent to child in this way, like a human chain passing buckets of water. For example we could pass the props Header has received down to <Nav />


You may be wondering 'what if we want to pass a property up the component tree?'. We will cover this later but essentially we can define a property and a function that sets it in the top component (say App for example) and we can then pass the setter function down as a prop. The child component can then use the function to alter the property living in the top component. This will become more clear when we start working with the useState() Hook.


As a final note we can also move our App.js, app.cs, and App.test.js into an App file in our components folder to be consistent. Just remember to change the import locations to reflect this, including the App import in src\index.js (e.g. import App from "./components/App/App";)


---------------------------------------------------------------------------------------------------------
04 COMPONENTS FROM DATA
---------------------------------------------------------------------------------------------------------


We've seen creating components declaratively/manually but one of the most common things we'll want to do is take a list or array of data and create JSX/HTML/components from that list programatically. Typically, this will involve mapping over the data to return the data inside JSX elements.

For this example lets say we have some data inside our Nav component that we want to display inside of a Link component. To do this we want to map over the data and return a Link component but we also want to pass the data a prop into the Link component. This allows us to include the data in our Link component. It might seems a little chicken and egg but we can flesh out the JSX of the Link component knowing that Nav will pass the data too it.

    export default function Nav() {
        const links = [
            { title: "Films", url: "https://swapi.dev/api/films/" },
            { title: "People", url: "https://swapi.dev/api/people/" },
            { title: "Planets", url: "https://swapi.dev/api/planets/" },
        ];

        return (
            <nav>
            {links.map((item, idx) => (
                <Link key={idx} data={item}/>
            ))}
            </nav>
        );
    }

And then one step down the tree...

    export default function Link({ data }) {
        return <div>{data.title}</div>;
    }

As you can see I've chosen to destructure the props here. If I had simply passed props as an argument I could have accessed the title with props.data.title. Alternatively, if I know I only want the title and nothing else I could instead have only passed this is during the map e.g. title={item.title}, then inside of Link I can simply destructure ({ title }) and use it as { title }. However, this would mean if we also wanted the url we'd have to pass that as a seperate prop.

Notice that when we map we can also chose to get access to the index. The reason I did this here is because I wanted to use it as each returned element's key property. But what is a key property? React doesn't have a way of knowing which element being returned by map is which. When React need to rerender it only wants to rerender what's absolutely necessary. Typically if the mapped out elements are in the same order and haven't changed then React can see this and will not rerender them but if we were to put a new element at the beginning or in the middle React will not be able to recognise any elements that are now in a different order and so will have to rerender them, wasting resources. By including a key attribute we help React recognise returned elements and avoid rerendering them unnecessarily; React can reconise previously rendered elements even when in a different order. This might not seem like a big deal but if you had an array of 10,000 objects everytime you inserted a new item React would have to rerender every item that has changed position in the array (so if you unshift an item in, all of them). For this reason we typically don't want to use index since it changes as the element moves in the array and would not avoid this rerendering. Instead we can use a 3rd party library like UUID to get unique keys for each element.


To summarise, when we want to generate components programatically we need to map over the collection of data we want to use, return the component while passing the props we need into it, and finally give each returned item a unique key to help React be efficient with its rendering.


---------------------------------------------------------------------------------------------------------
05 Adding Events
---------------------------------------------------------------------------------------------------------


We're used to adding event logic by querySelecting an html element in JavaScript and adding an event listener to it e.g. menuButton.addEventListener('click', () => {...}) etc.

Synthetic Events Reference --> https://reactjs.org/docs/events.html

With React we use 'Synthetic Events'. These are React events that are returned instead of the browser's native events, so instead of the mouseout event we work with onMouseLeave in React. The Synthetic Events have all the same properties as the native events (e.g. preventDefault(), bubbles, type, etc.).

Instead of adding event listeners to elements, in React we assign a function to an event by assigning it like an attribute to JSX elements. Instead of .addEventListener('click', ...) we instead do something like <div onClick={handleClick}></div> where handleClick() is a function we have already defined (usually inside the function component, before the return statement).

It's important to know that these attribute like Syntetic Events have to go on JSX ELEMENTS, NOT COMPONENTS. This is becuase JSX elements are essentially HTML whereas Components are essentially JavaScript objects and can't have event handlers attached to them. So, in short, this wouldn't work --> <Link onClick={handleClick} /> but this would <div onClick={handleClick}><Link /></div>.

Put another way, Synthetic Events have to be attached to things that will render to HTML, namely, JSX elements.

We can enter the function like this onClick={doathing} or like this onClick={() => doathing()} or if we want the event onClick={(ev) => doathing(ev)}. 

Here's an example of a simple form using synthetic events

    export default function SearchBar(props) {
        function submitted(ev) {
            ev.preventDefault();
            console.log("submitted");
        }

         function focused(ev) {
            console.log("onFocus");
        }

        function changed(ev) {
            console.log("onInput", ev.target.value);
        }

        function clicked(ev) {
            console.log("clicked");
        }

    return (
        <section className="searchBar">
        <form onSubmit={submitted}>
            <input
            className="searchText"
            type="text"
            name="keyword"
            placeholder="keyword"
            onFocus={focused}
            onInput={changed}
            />
            <button
            className="searchBtn"
            type="submit"
            name="searchBtn"
            onClick={clicked}
            >
            Search
            </button>
        </form>
        </section>
    );
    }

As you can see we have multiple functions defined at the top to handle multiple events. We then call those functions for the relevant events in the revelevant elements e.g. onClick for the button, onChange for the input etc.

These will end up being utalised as a component but the synthetic events are on JSX elements.


---------------------------------------------------------------------------------------------------------
06 Hooks
---------------------------------------------------------------------------------------------------------


Hooks are premade methods we can import from the React Library that can give our functional components super powers! They allow our functional components to 'hook into' state and lifecycle methods.


When we used to use class based components we had the property this.state that we could use to store and update state in our components but we do not have this with functional components. Instead, we can use the useState Hook.

To use the useState hook we first need to import it into our component from the react library

    import {useState} from 'react';

Now we call the useState function in our component. When we call this function it will return 2 objects, a property to store some state and a method to set the value of that property so we call the function and assign it to variables like so:

    const [count, setCount] = useState(0)

Notice that we can pass in the initial value we want the state to have as an argument, in this case 0. We can also leave this blank.

Something to bare in mind that this does not represent a universal holder of state for our component like this.state did, instead you would make multiple states for multiple purposes e.g.

    const [count, setCount] = useState(0)
    const [name, setName] = useState('tim')
    const [customer, setCustomer] = useState({id: 0, discountcode: '12', email: 'bill@ben.com'})

Notice you can use useState with objects and arrays, not just simple data types.

We can then use these state values in our JSX just like if we created a variable e.g. <h1>{name}</h1>

If we want to change the value of a state dynamically we can do so using it's setX method e.g. count can be changed with setCount.

Here's an example of changing a greeting state value using a button

    <button
        onClick={() => {
            setGreeting("felicitations");
        }}
        >
        change greeting
    </button>

We must always use this setter method to alter state and never attempt to alter it directly 
e.g. greeting = 'new greeting'. This is becuase the setter method doesn't just change the state's value, it 'watches' for a change in that state and tells React to rerender when its state changes. When we attempt to modify the state directly React doesn't know it's changed.

Here's an example of setting state on a form submit. Notice that we can access the relevant field inside the form using its name property (in this case keyword). Since this method is being called on submit the target is the form.

    const [myprop, setMyProp] = useState("default value");

    function submitted(ev) {
        ev.preventDefault();
        console.log("submitted");
        setMyProp(ev.target["keyword"].value);
    }

So this would change the value of the myprop state to be whether is in the keyword input field when the user submits the form (calling this function).

If a state (say term in this case) is an empty string then it will still be rendered if included like this <p>{term}</p>. We won't see anything on the page but if we don't want the paragraph to be rendered at all we can use a ternary to show it conditionally. This works because an empty string is falsey.

    {term ? <p>You searched for {term}</p> : ""}

So if term is not an empty string (truthy) it will render the paragraph and if term is empty (falsy) it will return an empty string. This empty string is not in a paragraph element like the empty string from term was before so it will not be rendered, it effectively returns nothing.

Something to know is a ternary returns an expression conditionally and does not control the flow of your program, for that stick to if statements.

If we only want to use state inside the component we declare it in then there's no problem with that. However, just like props, state cannot be passed up the tree, only down, and so we need to make sure we declare state high enough for all the components we want to have access to it. We can then pass down the setter function as a prop and child components can alter state of higher/parent components.

Let's suppose we want <SearchBar /> to get our most recent term and we want <SearchHistory /> to get all of the terms that have been submitted. We can achieve this by creating a state in <App /> that stores an array of terms searched for. Then we can pass the entire array (as a prop, like an attribute) to the <SearchHistory /> component and the latest entry to the <SearchBar /> component. We also need to pass the setter method down to <SearchBar /> so that it can add new terms to the array.

An important thing to notice with this - a child component can't pass state up to a parent BUT if the parent passes its setter method down to the child, the child can change the state in the parent using the parents setter method. It like a child having no money to buy something (state) but if a parent gives the child their credit card details (method to use/change money state of the parent) then the child can alter the parents money state, even though the child still doesn't have any money (state) of their own.

No in <SearchHistory /> we can map through the array (remembering to give each a key) and return each term in the array as a list element

    export default function SearchHistory(props) {
        return (
            <ul>
            {props.terms.map((term) => (
                <li key={term}>{term}</li>
            ))}
            </ul>
        );
    }

Assuming we will add new terms to the beginning of our array we can pass the first item into <SearchBar /> from <App /> like so --> <SearchBar term={terms[0]} />. Then we access it with {props.term} inside <SearchBar />.

Now on to adding new terms from a child component. We can't directly pass the state setter down, that has to be triggered in the component in which it is defined/where the state is. Instead we can call the setter in our own function and pass THAT down. Since we want to put the new term at the beginning we can use the spread operator to set a new array as the terms state with the new term at the beginning

  function addTerm(term) {
    setTerms([term, ...terms]);
  }

Now it's simply a matter of passing this function down to <SearchBar /> from <App /> (as a prop, like an attribute)

    <SearchBar term={terms[0]} addTerm={addTerm} />

And then going into the submitted function in <SearchBar /> and haveing it use this function there to change the state in <App />

    export default function SearchBar(props) {
        function submitted(ev) {
            ev.preventDefault();
            console.log("submitted");
            props.addTerm(ev.target["keyword"].value);
    }

Notice this is similar ot what we did before when state was defined inside the <SearchBar /> component --> setTerm(ev.target["keyword"].value). Now, we are simply using a function from props to call a setter function living in another (higher/parent) Component.

This is possible because in JavaScript functions are objects and can be passed around, used as arguments, used as varibles, just like anything else.

Understanding that we want to keep state in a high function and pass it and a function that can use its setter down to child components as props is key to understanding the useState() Hook.


---------------------------------------------------------------------------------------------------------
06 Hooks & Use Effect
---------------------------------------------------------------------------------------------------------


A pure function in JavaScript is a function that is deterministic, that is, if you give it the same inupt you will always get the same output. It also means that it doesn't effect things outside of its scope, its effect is entirely contained within its scope.

Things you wouldn't use a pure function for would be fetch calls or setting timers. These functions would necessaily have effects outside of their scope.

useEffect is a Hook (magic method) that allows us to perform functions at certain points in the lifecycle of the App, or when objects we chose are altered.

At its most basic useEffect() will take in a function to execute as a first argument and an array to object to 'watch' as its second argument. If we do not pass in a second argument at all, the function we pass in as the first argument will execute after EVERY RERENDER, exactly like componentDidUpdate from class based component lifecycle. If we pass in an empty array as the second argument, the function will be executed ONLY AFTER THE FIRST RENDER, just like componentDidMount.

useEffect() is fundamentally a way to perform functions outside of the usual flow of the render.

We import useEFfect() from React just like we did for useState() --> import {useEffect} from 'react';

To summarise here are the 3 basic ways we can now use thise uesEffect() function we have access to:

useEffect(()=>{}) --> run this function after first render and every rerender

useEffect(() =>{}, []) --> run this function after the initial render only

useEffect(() => {}, [count]) --> run this function whenever there is a change/rerender of count

Here's an example of the 3 in use

  useEffect(() => {
    console.log("Initial render");
  }, []);

  useEffect(() => {
    console.log("every render");
  });

  useEffect(() => {
    console.log("terms has changed");
  }, [terms]);

!React.StrictMode will render each component twice so if you are console logging like this you will get some confusing duplications.

useEffect is useful for fetch calls because we don't want to make them until after the initial render.

Here's an example of making using an asynchronous function to fetch data from the star wars api and firing it after the initial render using useEffect()

  useEffect(() => {
    console.log("Initial render complete");
    fetchData("films");
  }, []);

  async function fetchData(type) {
    let url = `https://swapi.dev/api/${type}`;
    let resp = await fetch(url);
    if (!resp.ok) throw new Error(resp.statusText);
    let data = await resp.json();
    setFilms(data.results);
  }

As you can see we handle all of the asynchrouns data fetching, data conversion, changing state in our async function then have it called after the initial render with useEffect(). This ensures there is no 'race' between rendering and data fetching taking place.

useState() and useEffect() are the two most common Hooks you will use in React. WIth them we can have stateful apps and execute code outside of the normal flow of rendering, or rather, useEffect() allows us to make use of the component lifecycle without needing to use class bases components.

A couple of things to keep in mind:

- Hooks must be used inside of your function component (before return)
- useEffect() can call asynchronous functions but don't try to make useEffect an asynchronous function (can end up in an infinite loop)

On final thing to know is useEffect can return something. This should be a function and it is called the CLEAN UP function. Basically, once the function you wanted to run with useEffect() has executed, the clean up function you define will run.

    useEffect(() => {
        fetchData(terms[0]);
        
        return ()=> {
            //clean up function
        }
    }, [terms])

The clean up function isn't always necessary but it can be useful if you want to reset or delete something after your primary useEffect function has fired.

 
---------------------------------------------------------------------------------------------------------
08 Refactoring & App Strategy
---------------------------------------------------------------------------------------------------------

In <SearchBar /> before we used a ternary to decided whether to return a result or and empty string
 
    {props.term ? <p>You searched for {props.term}</p> : ""}

The problem is the empty string is still being returned when ideally we simply want nothing to happen/be returned.

Instead of a ternary, we can use LOGICAL SHORTCUTTING to only return an element if one exists, otherwise nothing will happen

    {props.term && <p>You searched for {props.term}</p>}

So if the first part of the expression is not true the expression will stop being evaluated and the flow will move on, ignoring code after &&

Similarly, in <SearchBar /> we can use LOGICAL SHORTCUTTING to avoid adding empty items to our search history list. We do this in the submitted function so that the search term will never be added if the input is blank (falsey)

  function submitted(ev) {
    ev.preventDefault();
    ev.target["keyword"].value && props.addTerm(ev.target["keyword"].value);
  }

Logical Shortcutting is kind of like a very stripped down if statement. For the first example we could have written

    {props.term && <p>You searched for {props.term}</p>}

    as

    {if(props.term) return <p>You searched for {props.term}</p>}

One problem we currently have is that our search history allows for duplicates. Each truthy term is added to the list even if it's already listed multiple times.

One way to avoid this is to make use of the SET object.

A Set is a collection of unique values. It is like an array, except each value can only feature ONCE.

We can create a Set with the NEW keyword

    let mySet = new Set('bill', 'bobby', 'dale')

We can pass an array as an argument to Set() and the new Set object will have only unique items, refusing to add duplicates.

Here's an example of 2 arrays with duplicate names both internally and shared between them. We can pass them into Set() as a single array by using the spread operator on both. This will then return a new object with all the unique items from both arrays

    const myArr = ['bill', 'bob', 'bill', 'bill', 'bob']
    const myArr2 = ['joe', 'pete', 'bill', 'bob']
    const mySet = new Set([...myArr, ...myArr2])

    console.log(mySet)
        //{"bill","bob","joe","pete"}

We can implement this to remove duplicated from our searchTerms by modifying the addTerm() function in <App />

Instead of this

  function addTerm(term) {
    setTerms([term, ...terms]);
  }

  We can first make a Set from the updated terms array and use this to setTerms

  function addTerm(term) {
    let newTerms = new Set([term, ...terms])
    setTerms(newTerms);
  }

There is one issue with this. Remember that our Set newTerms is an OBJECT not an ARRAY and our terms state is an array. To resolve this issue we can simply convery the newTerms set into an array where we are using it to setTerms

  function addTerm(term) {
    let newTerms = new Set([term, ...terms]);
    setTerms(Array.from(newTerms));
  }

Now our searchResults will not include duplicates, however, if we do pass in a term that has already in the terms array it will jump to the front of the array which is exactly what we want. This is because if we look at 'new Set([term, ...terms]) the term is evaluated first and put at the first position of the Set(soon to be array) with the previous array of terms being evaluated after, therefore, it is the duplicate in previous array that does not get added to the Set, meaning the term effectively 'jumps back to the front of the queue/top of the stack'.


---------------------------------------------------------------------------------------------------------
09 Routing
---------------------------------------------------------------------------------------------------------

So far we have been working with components and displaying them on our page by returning them as elements in our <App /> component (which index.js takes and inserts into the element with the id='root' in index.html). But what if we want to have a different set of components rendered to the page depending on the situation e.g. a login page, a contact page, a home page etc.

With pure html/css/javascript we would simply have a seperate html file for each page and a link would tell the browser to load the desired html.

In React we will do our routing with an additional library - REACT ROUTER DOM

So far we have been making use of the REACT library. REACT ROUTER DOM is an additional library that will allow us to set up routing in our project.

You can think of it kind of like a switch statement that will return certain components based on user activity e.g. clicking a nav link.

Currently we're working on the local server port 3000

    http://localhost:3000/

If we add anything to the end of this url React will simply ignoring it and rerender the home package. The development server is ignoring any attempt at routing.

To get started we need to add REACT ROUTER DOM to our project.

    npm install react-router-dom

Across our app there will be 4 components from 'react-router-dom' that we will need to use to implement routing

    BROWSER ROUTER
    Routes
    ROUTE
    LINK

BROWSER ROUTER

In src/index.js we import

    import { BrowserRouter } from "react-router-dom";

You can rename this and you'll often see

    import { BrowserRouter as Router } from "react-router-dom";

This is a component we are getting from the react router dom library and it gives up access to a CONTEXT API to access the routing from anywhere in our application. We'll come back to CONTEXT APIs later but basically we'll be able to access information about the current route from anywhere in the application (kind of like a global state for routes).

We can now wrap our <App /> in src/index.js in this <BrowserRouter /> component or rather, render the <BrowserRouter /> component in index.html with our <App /> passed into it as a child.

import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./components/App/App";
import { BrowserRouter } from "react-router-dom";

    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(
    <BrowserRouter>
        <App />
    </BrowserRouter>
    );

If we run the app on local server and check the components in chrome dev tools we'll see that APP is no longer at the top, instead, there a 4 components wrapped around it

    BrowserRouter
        Router
            Navigation.Provider
                Location.Provider
                    App
                        Header etc...

This is how we will have access to route info anywhere in our App.

LINK

Before we were using a Link component that we made. react-router-dom comes with its own that we will use

    import {Link} from 'react-router-dom'

Using this object we can provide the to="" attribute that will be the value of the route e.g. to="films" ==> http://localhost:3000/films

Our Nav component now looks like this

    import "./nav.css";
    import { Link } from "react-router-dom";

    export default function Nav() {
    return (
        <nav>
            <Link to="/films">Films</Link>
            <Link to="/people">People</Link>
            <Link to="/planets">Planets</Link>
        </nav>
    );
    }

So now when we click these Link components in our page the url will change to reflect this, however, the page doesn't reload and nothing changes besides the url in the address bar.

ROUTES & ROUTE

Our app is set up to have a main component render our results, it is here we will use Routes and route.

Routes is a parent component in which we can place multiple ROUTE components as children.

ROUTE components have a path="" attribute that ties to the to="" attribute from Link, meaning that <Link to="/films">Films</Link> is connected to <Route path="/films"><Films /></Route>. As you can see from this example, the ROUTE component take our components as children and these are what will be rendered when a user clicks on the relevant Link; the user click on a Link that points to a Route and the Route inside the Routes returns its child components.

    import "./main.css";
    import { Routes, Route } from "react-router-dom";
    import Home from "../Home/Home";
    import Films from "../Films/Films";
    import People from "../People/People";
    import Planets from "../Planets/Planets";

    export default function Main(props) {
        return (
            <div className="mainContent">
                <Routes>
                    <Route path="/films" element={<Films />} />
                    <Route path="/people" element={<People />} />
                    <Route path="/planets" element={<Planets />} />
                    <Route path="/" element={<Home />} />
                </Routes>
            </div>
        );
    }

As you can see it's a lot like a switch statement. It may be confusing that the different react-router-dom components are implemented across our app but remember we have access to a context API because our entire App is wrapped in BrowserRouter>Router>Navigation.Provider>Location.Provider.

To summarise:

    1. <BrowserRouter /> wraps around our <App /> in index.js
    2. We use multiple <Link to="/example" /> components in our Navbar to give users a way to select routes
    3. Whever we want the revelevant components to render we put ONE <Routes /> component with multiple <Route path="/example" element={<Example />} /> components to render/return the desired component/s

The way the routes work is that the flow will go down the routes in Routes and return the first one that matches. Becuase of this we put the default case at the bottom and have it return out Home component, that is, if none of the Route components match the url then our App will always render the Home component.

